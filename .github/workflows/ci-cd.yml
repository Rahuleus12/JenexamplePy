name: Flask App CI/CD Pipeline

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests
      run: |
        pytest

  # Combined build and deploy steps to simplify the workflow
  deploy:
    needs: test
    runs-on: ubuntu-latest
    # Create different environments based on branch/release
    environment:
      name: ${{ github.ref == 'refs/heads/staging' && 'staging' || (github.event_name == 'release' && github.event.action == 'published' && 'production' || 'development') }}
    # Only run deploy on staging branch or release published
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'release' && github.event.action == 'published')
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Deploy application
      id: deploy
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        SERVER: ${{ github.ref == 'refs/heads/staging' && secrets.STAGING_SERVER || secrets.PRODUCTION_SERVER }}
        ENVIRONMENT: ${{ github.ref == 'refs/heads/staging' && 'staging' || 'production' }}
      run: |
        echo "Deploying to $ENVIRONMENT environment..."
        # Add deployment steps here (e.g., SSH to server, update code)
        # For now, we're just simulating the deployment
        echo "deployment-url=https://$ENVIRONMENT.example.com" >> $GITHUB_OUTPUT 