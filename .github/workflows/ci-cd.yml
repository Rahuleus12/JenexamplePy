name: Flask App CI/CD Pipeline

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests
      run: |
        pytest

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Build application
      run: |
        echo "Building application..."
        # Add build steps here if needed (e.g., creating distribution packages)
        # For a Flask app, this might be minimal
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: app-build
        path: |
          *.py
          requirements.txt
          
  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
    - uses: actions/checkout@v3
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: app-build
    - name: Deploy to staging
      id: deploy
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
      run: |
        echo "Deploying to staging environment..."
        # Add deployment steps here (e.g., SSH to server, update code)
        echo "deployment-url=https://staging.example.com" >> $GITHUB_OUTPUT
        
  deploy-production:
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
    - uses: actions/checkout@v3
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: app-build
    - name: Deploy to production
      id: deploy
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
      run: |
        echo "Deploying to production environment..."
        # Add deployment steps here (e.g., SSH to server, update code)
        echo "deployment-url=https://example.com" >> $GITHUB_OUTPUT 